{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","beforeEach","$q","backendSrv","datasourceRequest","when","status","templateSrv","replace","str","getAdhocFilters","instanceSettings","url","jsonData","api_key","app_key","ds","targets","query","options","range","from","to","it","done","expected_params","method","params","application_key","spy","expect","have","been","calledWith"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEAA,SAAS,mBAAT,EAA8B,YAAM;AAClC,MAAIC,MAAM,EAAV;;AAEAC,aAAW,YAAW;AACpBD,QAAIE,EAAJ;AACAF,QAAIG,UAAJ,GAAiB;AACfC,yBAAmB,6BAAM;AACvB,eAAOJ,IAAIE,EAAJ,CAAOG,IAAP,CAAY;AACjBC,kBAAQ;AADS,SAAZ,CAAP;AAGD;AALc,KAAjB;AAOAN,QAAIO,WAAJ,GAAkB;AAChBC,eAAS,iBAACC,GAAD;AAAA,eAASA,GAAT;AAAA,OADO;AAEhBC,uBAAiB;AAAA,eAAM,EAAN;AAAA;AAFD,KAAlB;;AAKA,QAAIC,mBAAmB;AACrBC,WAAK,kCADgB;AAErBC,gBAAU;AACRC,iBAAS,kBADD;AAERC,iBAAS;AAFD;AAFW,KAAvB;AAOAf,QAAIgB,EAAJ,GAAS,uBAAeL,gBAAf,EAAiCX,IAAIG,UAArC,EAAiDH,IAAIO,WAArD,CAAT;AACD,GAtBD;;AAwBAR,WAAS,gCAAT,EAA2C,YAAM;AAC/CE,eAAW,YAAW;AACpB,UAAIgB,UAAU,CACZ,EAAEC,OAAO,sBAAT,EADY,CAAd;;AAIAlB,UAAImB,OAAJ,GAAc;AACZC,eAAO;AACLC,gBAAM,QADD;AAELC,cAAI;AAFC,SADK;AAKZL,iBAASA;AALG,OAAd;AAOD,KAZD;;AAcAM,OAAG,wCAAH,EAA6C,UAACC,IAAD,EAAU;AACrD,UAAIC,kBAAkB;AACpBC,gBAAQ,KADY;AAEpBd,aAAK,wCAFe;AAGpBe,gBAAQ;AACNb,mBAAS,kBADH;AAENc,2BAAiB,kBAFX;AAGNP,gBAAM,KAHA;AAINC,cAAI,KAJE;AAKNJ,iBAAO;AALD;AAHY,OAAtB;AAWA,UAAId,oBAAoB,gBAAMyB,GAAN,CAAU7B,IAAIgB,EAAJ,CAAOb,UAAjB,EAA6B,mBAA7B,CAAxB;;AAEAH,UAAIgB,EAAJ,CAAOE,KAAP,CAAalB,IAAImB,OAAjB;AACAW,aAAO1B,iBAAP,EAA0BkB,EAA1B,CAA6BS,IAA7B,CAAkCC,IAAlC,CAAuCC,UAAvC,CAAkDR,eAAlD;AACAD;AACD,KAjBD;AAkBD,GAjCD;AAkCD,CA7DD","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\nimport sinon from 'sinon';\n\ndescribe('DataDogDatasource', () => {\n  let ctx = {};\n\n  beforeEach(function() {\n    ctx.$q = Q;\n    ctx.backendSrv = {\n      datasourceRequest: () => {\n        return ctx.$q.when({\n          status: 200\n        });\n      }\n    };\n    ctx.templateSrv = {\n      replace: (str) => str,\n      getAdhocFilters: () => []\n    };\n\n    let instanceSettings = {\n      url: 'https://app.datadoghq.com/api/v1',\n      jsonData: {\n        api_key: '0000deadbeaf0000',\n        app_key: '0000abcd0000abcd'\n      }\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  describe('When doing DataDog API request', () => {\n    beforeEach(function() {\n      let targets = [\n        { query: 'avg:system.load.5{*}' }\n      ];\n\n      ctx.options = {\n        range: {\n          from: 12340000,\n          to: 12340000\n        },\n        targets: targets\n      };\n    });\n\n    it('should send request with proper params', (done) => {\n      let expected_params = {\n        method: 'GET',\n        url: 'https://app.datadoghq.com/api/v1/query',\n        params: {\n          api_key: '0000deadbeaf0000',\n          application_key: '0000abcd0000abcd',\n          from: 12340,\n          to: 12340,\n          query: 'avg:system.load.5{*}'\n        }\n      };\n      let datasourceRequest = sinon.spy(ctx.ds.backendSrv, 'datasourceRequest');\n\n      ctx.ds.query(ctx.options);\n      expect(datasourceRequest).to.have.been.calledWith(expected_params);\n      done();\n    });\n  });\n});\n"]}