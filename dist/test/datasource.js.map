{"version":3,"sources":["../../src/datasource.js"],"names":["DataDogDatasource","instanceSettings","backendSrv","templateSrv","type","url","name","api_key","jsonData","application_key","app_key","supportMetrics","_cached_metrics","invokeDataDogApiRequest","then","status","title","message","catch","error","_cached_tags","length","Promise","resolve","fetching_tags","searchEntities","console","log","entitis","getTagsHosts","map","tags","hosts","tag","text","value","fetching","d","Date","setDate","getDate","from","Math","floor","getTime","params","result","metrics","metric","options","Object","keys","tagsHosts","kv","mapTagsToKVPairs","grafanaTags","grafanaValues","key","val","range","valueOf","to","targets","filter","t","hide","data","queries","query","queryString","join","replace","scopedVars","dataResponse","series","i","target","alias","expression","pointlist","point","timeFrom","timeTo","annotation","priority","sources","getEventStream","eventAnnotations","eventStreams","allEvents","eventStream","children","filteredEvents","event","alert_type","time","date_happened","flatten","entity","q","results","start","end","events","datasourceRequest","method","response","statusText","err","kv_tags","indexOf","kv_pairs","split","kv_object","forEach","pair","push"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class DataDogDatasource {\n\n  constructor (instanceSettings, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.api_key = instanceSettings.jsonData.api_key;\n    this.application_key = instanceSettings.jsonData.app_key;\n    this.supportMetrics = true;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this._cached_metrics = false;\n  }\n\n  // Function to check Datasource health\n  testDatasource() {\n    return this.invokeDataDogApiRequest('/downtime')\n    .then(() => {\n      return {\n        status: \"success\",\n        title: \"Success\",\n        message: \"Data source is working\"\n      };\n    })\n    .catch(error => {\n      var message = \"Connection error\";\n      if (error && error.message) {\n        message = error.message;\n      }\n\n      return {\n        status: \"error\",\n        title: \"Error\",\n        message: message\n      };\n    });\n  }\n\n  metricFindTags() {\n    if (this._cached_tags && this._cached_tags.length) {\n      return Promise.resolve(this._cached_tags);\n    }\n\n    if (this.fetching_tags) {\n      return this.fetching_tags;\n    }\n\n    this.searchEntities('hosts').then(entitis => {\n      console.log(entitis);\n    });\n\n    this.fetching_tags = this.getTagsHosts()\n    .then(tags => {\n      this._cached_tags = _.map(tags, (hosts, tag) => {\n        return {\n          text: tag,\n          value: tag,\n        };\n      });\n\n      return this._cached_tags;\n    });\n\n    return this.fetching_tags;\n  }\n\n  metricFindQuery() {\n    if (this._cached_metrics) {\n      return Promise.resolve(this._cached_metrics);\n    }\n\n    if (this.fetching) {\n      return this.fetching;\n    }\n\n    var d = new Date();\n    d.setDate(d.getDate() - 1);\n    var from = Math.floor(d.getTime() / 1000);\n    var params = { from: from };\n\n    this.fetching = this.invokeDataDogApiRequest('/metrics', params)\n    .then(result => {\n      this._cached_metrics = _.map(result.metrics, metric => {\n        return {\n          text: metric,\n          value: metric,\n        };\n      });\n\n      return this._cached_metrics;\n    });\n\n    return this.fetching;\n  }\n\n  getTagKeys(options) {\n    return this.getTagsHosts().then(tagsHosts => {\n      let tags = Object.keys(tagsHosts);\n      let kv = mapTagsToKVPairs(tags);\n      let grafanaTags = Object.keys(kv);\n      return grafanaTags.map(tag => {\n        return {\n          text: tag,\n          value: tag,\n        };\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return this.getTagsHosts().then(tagsHosts => {\n      let tags = Object.keys(tagsHosts);\n      let kv = mapTagsToKVPairs(tags);\n      let grafanaValues = kv[options.key];\n      return grafanaValues.map(val => {\n        return {\n          text: val,\n          value: val,\n        };\n      });\n    });\n  }\n\n  query(options) {\n    var from = Math.floor(options.range.from.valueOf() / 1000);\n    var to = Math.floor(options.range.to.valueOf() / 1000);\n\n    var targets = options.targets.filter(function (t) { return !t.hide; });\n\n    if (targets.length <= 0) {\n      return Promise.resolve({data: []});\n    }\n    var queries = _.map(options.targets, function (val) {\n      return val.query;\n    });\n\n    var queryString = queries.join(',');\n    queryString = this.templateSrv.replace(queryString, options.scopedVars);\n\n    var params = {\n      from: from,\n      to: to,\n      query: queryString,\n    };\n\n    return this.invokeDataDogApiRequest('/query', params)\n    .then(result => {\n      var dataResponse = _.map(result.series, (series, i) => {\n        var target = targets[i];\n        return {\n          'target': target.alias || series.expression,\n          'datapoints': _.map(series.pointlist, point => {\n            return [point[1], point[0]];\n          })\n        };\n      });\n\n      return {data: dataResponse};\n    });\n  }\n\n  annotationQuery(options) {\n    let timeFrom = Math.floor(options.range.from.valueOf() / 1000);\n    let timeTo = Math.floor(options.range.to.valueOf() / 1000);\n    let {priority, sources, tags} = options.annotation;\n\n    return this.getEventStream(timeFrom, timeTo, priority, sources, tags)\n    .then(eventStreams => {\n      let eventAnnotations = eventStreams.map(eventStream => {\n        let allEvents = eventStream.children;\n        let filteredEvents = _.filter(allEvents, event => {\n          return event.alert_type !== 'success';\n        });\n\n        return _.map(filteredEvents, event => {\n          return {\n            annotation: options.annotation,\n            time: event.date_happened * 1000,\n            title: eventStream.title,\n            text: eventStream.text,\n            tags: eventStream.tags\n          };\n        });\n      });\n\n      return _.flatten(eventAnnotations);\n    });\n  }\n\n  getHosts() {\n    return this.searchEntities('hosts');\n  }\n\n  // entity should be 'hosts' or 'metrics'\n  // http://docs.datadoghq.com/api/?lang=console#search\n  searchEntities(entity) {\n    let params = {q: ''};\n    if (entity) {\n      params.q = `${entity}:`;\n    }\n\n    return this.invokeDataDogApiRequest('/search', params)\n    .then(result => {\n      if (result && result.results) {\n        return result.results[entity];\n      }\n    });\n  }\n\n  getTagsHosts() {\n    return this.invokeDataDogApiRequest('/tags/hosts')\n    .then(result => {\n      if (result && result.tags) {\n        return result.tags;\n      }\n    });\n  }\n\n  getEventStream(timeFrom, timeTo, priority, sources, tags) {\n    let params = {\n      start: timeFrom,\n      end: timeTo\n    };\n    if (priority) {\n      params.priority = priority;\n    }\n    if (sources) {\n      params.sources = sources;\n    }\n    if (tags) {\n      params.tags = tags;\n    }\n\n    return this.invokeDataDogApiRequest('/events', params)\n    .then(result => {\n      if (result.events) {\n        return result.events;\n      } else {\n        return [];\n      }\n    });\n  }\n\n  invokeDataDogApiRequest(url, params = {}) {\n    // Set auth params\n    params.api_key = this.api_key;\n    params.application_key = this.application_key;\n\n    return this.backendSrv.datasourceRequest({\n      method: 'GET',\n      url: this.url + url,\n      params: params\n    })\n    .then(response => {\n      if (response.data) {\n        return response.data;\n      } else {\n        throw {message: 'DataDog API request error'};\n      }\n    })\n    .catch(error => {\n      var message = 'DataDog API request error';\n      if (error.statusText) {\n        message = error.status + ' ' + error.statusText;\n        throw {message: message};\n      } else if (error.err.statusText) {\n        throw {message: error.err.statusText};\n      } else {\n        throw {message: message};\n      }\n    });\n  }\n}\n\n/*\n * Convert tags to key-value pairs\n * [region:east, region:nw] => {region: [east, nw]}\n */\nfunction mapTagsToKVPairs(tags) {\n  let kv_tags = _.filter(tags, tag => {\n    return (tag.indexOf(':') !== -1);\n  });\n\n  let kv_pairs = kv_tags.map(tag => {\n    return tag.split(':', 2); // Limit to 2\n  });\n\n  let kv_object = {};\n  kv_pairs.forEach(pair => {\n    let key = pair[0];\n    let val = pair[1];\n\n    if (kv_object[key]) {\n      kv_object[key].push(val);\n    } else {\n      kv_object[key] = [val];\n    }\n  });\n\n  return kv_object;\n}\n"]}