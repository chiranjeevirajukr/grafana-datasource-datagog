{"version":3,"sources":["../../src/query_builder.js"],"names":["buildQuery","target","adhocFilters","aggregation","metric","tags","functions","query","functionInstances","getFunctionInstances","length","join","adhocTags","buildAdHocFilterString","as","groupedFuncs","groupBy","func","def","append","each","appends","render","wraps","map","f","createFuncInstance","funcDef","withDefaultParams","params","slice","filter","key","value"],"mappings":";;;;;QAGgBA,U,GAAAA,U;;AAHhB;;;;AACA;;;;;;AAEO,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,YAA5B,EAA0C;AAAA,KAC3CC,WAD2C,GACHF,MADG,CAC3CE,WAD2C;AAAA,KAC9BC,MAD8B,GACHH,MADG,CAC9BG,MAD8B;AAAA,KACtBC,IADsB,GACHJ,MADG,CACtBI,IADsB;AAAA,KAChBC,SADgB,GACHL,MADG,CAChBK,SADgB;;AAEhD,KAAIC,QAAWJ,WAAX,SAA0BC,MAA9B;;AAEA,KAAII,oBAAqBC,qBAAqBH,SAArB,CAAzB;;AAEA,KAAKD,QAAQA,KAAKK,MAAd,IAA0BR,gBAAgBA,aAAaQ,MAA3D,EAAoE;AAClEH,WAAS,GAAT;;AAEA,MAAIF,QAAQA,KAAKK,MAAjB,EAAyB;AACxBH,YAASF,KAAKM,IAAL,CAAU,GAAV,CAAT;AACA;;AAED,MAAIT,gBAAgBA,aAAaQ,MAAjC,EAAyC;AACxC,OAAIE,YAAYC,uBAAuBX,YAAvB,CAAhB;AACA,OAAIG,QAAQA,KAAKK,MAAjB,EAAyB;AACxBH,aAAS,GAAT;AACA;AACDA,YAASK,SAAT;AACA;;AAEDL,WAAS,GAAT;AACD,EAhBD,MAgBO;AACLA,WAAS,KAAT;AACD;;AAED,KAAIN,OAAOa,EAAX,EAAe;AACbP,WAAS,MAAMN,OAAOa,EAAb,GAAkB,IAA3B;AACD;;AAED,KAAIC,eAAe,iBAAEC,OAAF,CAAUR,iBAAV,EAA6B,gBAAQ;AACtD,MAAIS,KAAKC,GAAL,CAASC,MAAb,EAAqB;AACnB,UAAO,SAAP;AACD,GAFD,MAEO;AACL,UAAO,OAAP;AACD;AACF,EANkB,CAAnB;;AAQA,kBAAEC,IAAF,CAAOL,aAAaM,OAApB,EAA6B,gBAAQ;AACnCd,WAAS,MAAOU,KAAKK,MAAL,EAAhB;AACD,EAFD;;AAIA,kBAAEF,IAAF,CAAOL,aAAaQ,KAApB,EAA2B,gBAAQ;AACjChB,UAAQU,KAAKK,MAAL,CAAYf,KAAZ,CAAR;AACD,EAFD;;AAIA,QAAOA,KAAP;AACA;;AAED,SAASE,oBAAT,CAA8BH,SAA9B,EAAyC;AACxC,QAAO,iBAAEkB,GAAF,CAAMlB,SAAN,EAAiB,gBAAQ;AAC9B,MAAImB,IAAI,gBAAMC,kBAAN,CAAyBT,KAAKU,OAA9B,EAAuC,EAACC,mBAAmB,KAApB,EAAvC,CAAR;AACAH,IAAEI,MAAF,GAAWZ,KAAKY,MAAL,CAAYC,KAAZ,EAAX;AACA,SAAOL,CAAP;AACD,EAJM,CAAP;AAKA;;AAED,SAASZ,sBAAT,CAAgCX,YAAhC,EAA8C;AAC5C,QAAOA,aAAasB,GAAb,CAAiB,kBAAU;AAChC,SAAOO,OAAOC,GAAP,GAAa,GAAb,GAAmBD,OAAOE,KAAjC;AACD,EAFM,EAEJtB,IAFI,CAEC,GAFD,CAAP;AAGD","file":"query_builder.js","sourcesContent":["import _ from 'lodash';\nimport dfunc from './dfunc';\n\nexport function buildQuery(target, adhocFilters) {\n\tlet {aggregation, metric, tags, functions} = target;\n\tlet query = `${aggregation}:${metric}`;\n\n\tlet functionInstances  = getFunctionInstances(functions);\n\n\tif ((tags && tags.length) || (adhocFilters && adhocFilters.length)) {\n\t  query += '{';\n\n\t  if (tags && tags.length) {\n\t  \tquery += tags.join(',');\n\t  }\n\n\t  if (adhocFilters && adhocFilters.length) {\n\t  \tlet adhocTags = buildAdHocFilterString(adhocFilters);\n\t  \tif (tags && tags.length) {\n\t  \t\tquery += ',';\n\t  \t}\n\t  \tquery += adhocTags;\n\t  }\n\n\t  query += '}';\n\t} else {\n\t  query += '{*}';\n\t}\n\n\tif (target.as) {\n\t  query += '.' + target.as + '()';\n\t}\n\n\tvar groupedFuncs = _.groupBy(functionInstances, func => {\n\t  if (func.def.append) {\n\t    return 'appends';\n\t  } else {\n\t    return 'wraps';\n\t  }\n\t});\n\n\t_.each(groupedFuncs.appends, func => {\n\t  query += '.'  + func.render();\n\t});\n\n\t_.each(groupedFuncs.wraps, func => {\n\t  query = func.render(query);\n\t});\n\n\treturn query;\n}\n\nfunction getFunctionInstances(functions) {\n\treturn _.map(functions, func => {\n\t  var f = dfunc.createFuncInstance(func.funcDef, {withDefaultParams: false});\n\t  f.params = func.params.slice();\n\t  return f;\n\t});\n}\n\nfunction buildAdHocFilterString(adhocFilters) {\n  return adhocFilters.map(filter => {\n    return filter.key + ':' + filter.value;\n  }).join(',');\n}\n"]}