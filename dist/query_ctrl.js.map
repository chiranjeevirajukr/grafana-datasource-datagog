{"version":3,"sources":["../src/query_ctrl.js"],"names":["_","dfunc","QueryCtrl","queryBuilder","DataDogQueryCtrl","$scope","$injector","$q","uiSegmentSrv","templateSrv","removeText","target","aggregation","aggregationSegment","newSegment","value","fake","custom","metric","metricSegment","tags","tagSegments","map","fixTagSegments","functions","f","createFuncInstance","func","funcDef","withDefaultParams","params","slice","as","asSegment","rawQuery","datasource","metricFindQuery","then","transformToSegments","when","text","segment","metricFindTags","type","removeSegment","results","unshift","panelCtrl","refresh","count","length","lastSegment","Math","max","push","newPlusButton","error","def","name","without","persistFunctions","targetChanged","added","index","splice","realSegments","filter","addTemplateVars","segments","expandable","variables","variable","query","buildQuery","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import _ from 'lodash';\nimport dfunc from './dfunc';\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './func_editor';\nimport './add_datadog_func';\nimport * as queryBuilder from './query_builder';\n\nexport class DataDogQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, $q, uiSegmentSrv, templateSrv)  {\n    super($scope, $injector);\n    this.removeText = '-- remove tag --';\n    this.$q = $q;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n\n    if (this.target.aggregation) {\n      this.aggregationSegment = new uiSegmentSrv.newSegment(\n        this.target.aggregation\n      );\n    } else {\n      this.aggregationSegment = new uiSegmentSrv.newSegment({\n        value: 'Select Aggregation',\n        fake: true,\n        custom: false,\n      });\n    }\n\n    if (this.target.metric) {\n      this.metricSegment = new uiSegmentSrv.newSegment(\n        this.target.metric\n      );\n    } else {\n      this.metricSegment = new uiSegmentSrv.newSegment({\n        value: 'Select Metric',\n        fake: true,\n        custom: false,\n      });\n    }\n\n    this.target.tags = this.target.tags || [];\n    this.tagSegments = this.target.tags.map(uiSegmentSrv.newSegment);\n    this.fixTagSegments();\n\n    this.functions = [];\n    this.target.functions = this.target.functions || [];\n    this.functions = _.map(this.target.functions, func => {\n      var f = dfunc.createFuncInstance(func.funcDef, {withDefaultParams: false});\n      f.params = func.params.slice();\n      return f;\n    });\n\n    if (this.target.as) {\n      this.asSegment = uiSegmentSrv.newSegment(this.target.as);\n    } else {\n      this.asSegment = uiSegmentSrv.newSegment({\n        value: 'Select As',\n        fake: true,\n        custom: false,\n      });\n    }\n\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  getMetrics() {\n    return this.datasource.metricFindQuery()\n    .then(this.transformToSegments(true));\n  }\n\n  getAggregations() {\n    return this.$q.when([\n      {text: 'avg by', value: 'avg'},\n      {text: 'max by', value: 'max'},\n      {text: 'min by', value: 'min'},\n      {text: 'sub by', value: 'sum'},\n    ]);\n  }\n\n  getAs() {\n    return this.$q.when([\n      {text: 'None', value: 'None'},\n      {text: 'as_count', value: 'as_count'},\n      {text: 'as_rate', value: 'as_rate'},\n    ]);\n  }\n\n  getTags(segment) {\n    return this.datasource.metricFindTags()\n    .then(this.transformToSegments(false))\n    .then(results => {\n      if (segment.type !== 'plus-button') {\n        let removeSegment = this.uiSegmentSrv.newSegment({text: this.removeText, value: this.removeText});\n        results.unshift(removeSegment);\n      }\n\n      return results;\n    });\n  }\n\n  aggregationChanged() {\n    this.target.aggregation = this.aggregationSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  metricChanged() {\n    this.target.metric = this.metricSegment.value;\n    this.panelCtrl.refresh();\n  }\n\n  asChanged() {\n    if (this.asSegment.value === 'None') {\n      this.target.as = null;\n    } else {\n      this.target.as = this.asSegment.value;\n    }\n    this.panelCtrl.refresh();\n  }\n\n  fixTagSegments() {\n    var count = this.tagSegments.length;\n    var lastSegment = this.tagSegments[Math.max(count-1, 0)];\n\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\n    }\n  }\n\n  targetChanged() {\n    if (this.error) {\n      return;\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  persistFunctions () {\n    this.target.functions = _.map(this.functions, func => {\n      return {\n        funcDef: func.def.name,\n        params: func.params.slice(),\n      };\n    });\n  }\n\n  removeFunction(func) {\n    this.functions = _.without(this.functions, func);\n    this.persistFunctions();\n    this.targetChanged();\n  }\n\n  addFunction(funcDef) {\n    var func = dfunc.createFuncInstance(funcDef, {withDefaultParams: true});\n    func.added = true;\n    this.functions.push(func);\n    this.persistFunctions();\n    this.targetChanged();\n  }\n\n  tagSegmentUpdated(segment, index) {\n    if (segment.value === this.removeText) {\n      this.tagSegments.splice(index, 1);\n    }\n\n    let realSegments = _.filter(this.tagSegments, segment => segment.value);\n    this.target.tags = realSegments.map(segment => segment.value);\n\n    this.tagSegments = _.map(this.target.tags, this.uiSegmentSrv.newSegment);\n    this.fixTagSegments();\n\n    this.panelCtrl.refresh();\n  }\n\n  transformToSegments(addTemplateVars) {\n    return (results) => {\n      var segments = _.map(results, segment => {\n        let newSegment = { value: segment.text, expandable: segment.expandable };\n        return this.uiSegmentSrv.newSegment(newSegment);\n      });\n\n      if (addTemplateVars) {\n        for (let variable of this.templateSrv.variables) {\n          let newSegment = { type: 'template', value: '$' + variable.name, expandable: true };\n          segments.unshift(this.uiSegmentSrv.newSegment(newSegment));\n        }\n      }\n\n      return segments;\n    };\n  }\n\n  getCollapsedText() {\n    if (this.target.rawQuery) {\n      return this.target.query;\n    } else {\n      return queryBuilder.buildQuery(this.target);\n    }\n  }\n}\n\nDataDogQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}